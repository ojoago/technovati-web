{"version":3,"file":"js/8232.be347062.js","mappings":"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","sources":["webpack://Technovati/./src/composables/formatError.js","webpack://Technovati/./src/views/users/ApprovalLevel.vue","webpack://Technovati/./src/views/users/ApprovalLevel.vue?fa71"],"sourcesContent":["\r\nexport function formatError() {\r\n    function transformValidationErrors(response , handleType = 'axios'){\r\n        const errors = []\r\n        if(handleType == 'axios'){\r\n            if(response){\r\n                for (let key in response) {\r\n                    if(key.indexOf('.') !== -1){\r\n                        let k = trimKey(key);\r\n                        errors[k] = response[key][0]\r\n                    }else{\r\n                        errors[key] = response[key][0]\r\n                    }\r\n                    errors[key] = response[key][0]\r\n                }\r\n            }\r\n        }\r\n        return errors\r\n    }\r\n    \r\n    function trimKey(key){\r\n        const parts = key.split('.').filter(part => (part));\r\n        const part = key.split('.').filter(part => !isNaN(part));\r\n       \r\n        // const numericValues = parts.map(Number);\r\n        return parts[2]+part.map(Number);\r\n\r\n// console.log(numericValues);\r\n    }\r\n\r\n    return {\r\n        transformValidationErrors\r\n    }\r\n}","<template>\r\n    <div>\r\n        <div class=\"container mt-2\">\r\n            <div class=\"card\">\r\n                <div class=\"card-body\">\r\n                    <div class=\"card-header\">\r\n                        <h3>Approval Level</h3>\r\n                    </div>\r\n                    <button class=\"btn btn-sm btn-primary m-2\" @click=\"toggleModal=true\">Add New</button>\r\n                    <div class=\"row\">\r\n                            <div class=\"col-md-4\">\r\n                            <fieldset class=\"border rounded-3 p-2 m-1\">\r\n                                <legend class=\"float-none w-auto px-2\">Levels</legend>\r\n                                <div class=\"table-responsive\">\r\n                                    <table class=\"table-hover table-stripped table-bordered table\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>title</th>\r\n                                                <th>level</th>\r\n                                                <th width =\"5%\" > <i class=\"bi bi-gear-fill\"></i> </th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr v-for=\"(dp, loop) in levels\" :key=\"loop\">\r\n                                                <td>{{ dp.title }}</td>\r\n                                                <td>{{ dp.level }}</td>\r\n                                                <td>\r\n                                                    <div class=\"dropdown\">\r\n                                                        <button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle\" data-bs-toggle=\"dropdown\">\r\n                                                            <i class=\"bi bi-tools\"></i>\r\n                                                        </button>\r\n                                                        <ul class=\"dropdown-menu\">\r\n                                                            <li><a class=\"dropdown-item pointer\" @click=\"editLevel(dp)\">Edit</a></li>\r\n                                                            <li><a class=\"dropdown-item pointer\" @click=\"openModal(dp.level)\">Assign</a></li>\r\n                                                        </ul>\r\n                                                    </div>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                    \r\n                                </div>\r\n                            </fieldset>\r\n                        </div>\r\n                        <div class=\"col-md-8\">\r\n                            <fieldset class=\"border rounded-3 p-2 m-1\">\r\n                                <legend class=\"float-none w-auto px-2\">Assigend Level</legend>\r\n                                <div class=\"table-responsive\">\r\n                                    <table class=\"table-hover table-stripped table-bordered table\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>Username</th>\r\n                                                <th>Full name</th>\r\n                                                <th>level</th>\r\n                                                 <th width =\"5%\" > <i class=\"bi bi-gear-fill\"></i> </th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr v-for=\"(dp, loop) in assigned\" :key=\"loop\">\r\n                                                <td>{{ dp.username }}</td>\r\n                                                <td>{{ `${dp.lastname} ${dp.firstname}` }}  {{ dp.othername }}</td>\r\n                                                <td>{{ dp.level }}</td>\r\n                                                <td> <i class=\"bi bi-trash pointer\" title=\"revoke level\" @click=\"revokeLevel(dp.pid)\"></i></td>\r\n                                               \r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                    \r\n                                </div>\r\n                            </fieldset>\r\n                        </div>\r\n                    </div>\r\n                     <!-- Default Tabs -->\r\n                      \r\n                     \r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <o-modal :isOpen=\"toggleModal\" modal-class=\"modal-xs\" @submit=\"createApprovalLevel\" title=\"Create Approval Level\" @modal-close=\"closeModal\">\r\n            <template #content>\r\n                <div>\r\n                    <form >\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-12\">\r\n                                <div class=\"form-group\">\r\n                                    <label class=\"form-label\">Title</label>\r\n                                    <input type=\"text\" v-model=\"level.title\" class=\"form-control form-control-sm\" placeholder=\"e.g level 1\">\r\n                                    <p class=\"text-danger \" v-if=\"errors?.title\">{{ errors?.title }}</p>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div class=\"col-md-12\">\r\n                                <div class=\"form-group\">\r\n                                    <label class=\"form-label\">Level</label>\r\n                                    <select class=\"form-control form-control-sm\" v-model=\"level.level\">\r\n                                        <option value=\"\" disabled selected>Select Level</option>\r\n                                        <option value=\"2\">02</option>\r\n                                        <option value=\"3\">03</option>\r\n                                        <option value=\"4\">04</option>\r\n                                    </select>\r\n                                    <p class=\"text-danger \" v-if=\"errors?.level\">{{ errors?.level }}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </template>\r\n        </o-modal>\r\n\r\n        <o-modal :isOpen=\"isModalOpened\" modal-class=\"modal-xs\" @submit=\"assignLevel\" title=\"Assign Level\" @modal-close=\"closeModal\">\r\n            <template #content>\r\n                <div>\r\n                    <form  >\r\n                        <div class=\"row\">\r\n\r\n                            <div class=\"col-md-12\">\r\n                                <div class=\"form-group\">\r\n                                    <label class=\"form-label\">Staff  <span>*</span> </label>\r\n                                    <Select2 v-model=\"assign.user_pid\" :options=\"users\" :settings=\"{ width: '100%' }\"  />\r\n                                    <p class=\"text-danger \" v-if=\"a_errors?.user_pid\">{{ a_errors?.user_pid[0] }}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </form>\r\n                </div>\r\n            </template>\r\n        </o-modal>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport store from \"@/store\";\r\nimport { ref } from \"vue\";\r\nimport Select2 from 'vue3-select2-component';\r\nimport OModal from \"@/components/OModal.vue\";\r\nimport { formatError } from \"@/composables/formatError\";\r\nconst {transformValidationErrors} = formatError()\r\nconst isModalOpened = ref(false);\r\n\r\nconst openModal = (level) => {\r\n    isModalOpened.value = true;\r\n    assign.value.level = level;\r\n};\r\nconst closeModal = () => {\r\n    isModalOpened.value = false;\r\n    toggleModal.value = false;\r\n    resetAttr()\r\n};\r\nconst toggleModal = ref(false);\r\n\r\n    \r\n    const levels = ref({});\r\n    const level = ref({\r\n        'title':'' ,\r\n        'level':'' , \r\n    });\r\n    const resetAttr = () => {\r\n        level.value ={\r\n            'title':'' ,\r\n            'level':'' , \r\n        }\r\n    }\r\n    const assign = ref({\r\n        level: '',\r\n        user_pid:''\r\n    });\r\n   \r\n \r\n    function editLevel(data){\r\n        level.value = {\r\n            'title':data.title ,\r\n            'level':data.level , \r\n            'id': data.id\r\n        }\r\n        toggleModal.value = true\r\n    }\r\n\r\n    const errors = ref({})\r\n    function createApprovalLevel() {\r\n        errors.value = []\r\n        store.dispatch('postMethod', { url: '/create-approval-level', param: level.value }).then((data) => {\r\n            if (data?.status == 422) {\r\n                errors.value = transformValidationErrors(data.data)\r\n            } else if (data?.status == 201) {\r\n                closeModal();\r\n                loadApprovalLevel()\r\n            }\r\n        })\r\n    }\r\n\r\n    const a_errors = ref({})\r\n    function assignLevel() {\r\n        a_errors.value = []\r\n        store.dispatch('postMethod', { url: '/assign-level', param: assign.value }).then((data) => {\r\n            if (data?.status == 422) {\r\n                a_errors.value = data.data;\r\n            }else if(data?.status == 201 ){\r\n                closeModal();\r\n                loadAssignLevel()\r\n            }\r\n        })\r\n    }\r\n    \r\n    const revokeLevel  = (pid)  => {\r\n         store.dispatch('putMethod', { url: '/revoke-level/'+pid, prompt:'Are you sure, you want to revoke this right?' }).then((data) => {\r\n            if (data?.status == 201) {\r\n                closeModal();\r\n                loadAssignLevel()\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    loadApprovalLevel()\r\n    \r\n    function loadApprovalLevel(url ='/load-approval-levels') {\r\n        store.dispatch('getMethod', { url: url }).then((data) => {\r\n            if (data?.status == 200) {\r\n                levels.value = data.data;\r\n            }else{\r\n                levels.value = {}\r\n            }\r\n        })\r\n    }\r\n\r\n    loadAssignLevel()\r\n    const assigned = ref({})\r\n    function loadAssignLevel(url ='/load-assign-levels') {\r\n        store.dispatch('getMethod', { url: url }).then((data) => {\r\n            if (data?.status == 200) {\r\n                assigned.value = data.data;\r\n            }else{\r\n                assigned.value = {}\r\n            }\r\n        })\r\n    }\r\n    // load-designation\r\n    // const designations = ref({});\r\n    // function loadDesignation(url = '/load-designation') {\r\n    //     store.dispatch('getMethod', { url: url }).then((data) => {\r\n    //         if (data?.status == 200) {\r\n    //             designations.value = data.data;\r\n    //         }else{\r\n    //             designations.value = {}\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    const users = ref([]);\r\n    function dropdownAllow() {\r\n        store.dispatch('loadDropdown', 'users').then(({ data }) => {\r\n            users.value = data;\r\n        }).catch(e => {\r\n            console.log(e);\r\n        })\r\n    }\r\n    dropdownAllow()\r\n\r\n   \r\n\r\n\r\n    //  onMounted(() => {\r\n    //     // const subTab = document.querySelector('#sub-tab');\r\n    //     const desigTab = document.querySelector('#desig-tab');\r\n    //     // subTab.addEventListener('click',()=>{\r\n    //     //     loadSubDepartment()\r\n    //     // })\r\n    //     desigTab.addEventListener('click',()=>{\r\n    //         loadDesignation()\r\n    //     })\r\n    //  })\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import script from \"./ApprovalLevel.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ApprovalLevel.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["formatError","transformValidationErrors","response","handleType","errors","key","indexOf","k","trimKey","parts","split","filter","part","isNaN","map","Number","isModalOpened","ref","openModal","level","value","assign","closeModal","toggleModal","resetAttr","levels","user_pid","editLevel","data","title","id","createApprovalLevel","store","dispatch","url","param","then","status","loadApprovalLevel","a_errors","assignLevel","loadAssignLevel","revokeLevel","pid","prompt","assigned","users","dropdownAllow","catch","e","console","log","__exports__"],"sourceRoot":""}