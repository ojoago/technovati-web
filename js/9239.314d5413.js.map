{"version":3,"file":"js/9239.314d5413.js","mappings":"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","sources":["webpack://Technovati/../src/lib/google-charts-loader.ts","webpack://Technovati/../src/utils.ts","webpack://Technovati/../src/lib/debounce.ts","webpack://Technovati/../src/components/GChart.ts","webpack://Technovati/../src/index.ts","webpack://Technovati/./src/components/CardComponent.vue","webpack://Technovati/./src/views/dashboard/MdDashboard.vue","webpack://Technovati/./src/views/dashboard/MdDashboard.vue?c27a"],"sourcesContent":["/**\n * Usage:\n * import { loadGoogleCharts } from 'vue-google-charts'\n *\n * loadGoogleCharts('current', { packages: ['corechart', 'map'] })\n *  .then(google => {\n *    const chart = new google.visualization.Map ...\n *  })\n */\n\nimport type {\n  GoogleViz,\n  GoogleChartLoader,\n  GoogleChartVersion,\n  GoogleChartLoaderOptions,\n} from '../types';\n\nconst chartsScriptUrl = 'https://www.gstatic.com/charts/loader.js';\n\nlet chartsLoaderPromise: null | Promise<GoogleChartLoader> = null;\n\nconst loadedPackages = new Map();\n\nexport function getChartsLoader(): Promise<GoogleChartLoader> {\n  // If already included in the page:\n  if (window.google !== undefined) {\n    return Promise.resolve(window.google.charts);\n  }\n\n  if (chartsLoaderPromise === null) {\n    chartsLoaderPromise = new Promise(resolve => {\n      // Find script tag with same src in DOM.\n      const foundScript = document.querySelector<HTMLScriptElement>(\n        `script[src=\"${chartsScriptUrl}\"]`\n      );\n\n      // Create or get existed tag.\n      const script = foundScript || document.createElement('script');\n\n      // Set src if no script was found.\n      if (!foundScript) {\n        script.src = chartsScriptUrl;\n        script.type = 'text/javascript';\n\n        document.head.append(script);\n      }\n\n      script.onload = () => {\n        if (window.google !== undefined) {\n          resolve(window.google.charts);\n        }\n      };\n    });\n  }\n\n  return chartsLoaderPromise;\n}\n\n/**\n * Function to load Google Charts JS API.\n * @param version - Chart version to load.\n * @param packages - Packages to load.\n * @param language - Languages to load.\n * @param mapsApiKey - Google Maps api key.\n * @returns\n */\nexport async function loadGoogleCharts(\n  version: GoogleChartVersion = 'current',\n  {\n    packages = ['corechart', 'controls'],\n    language = 'en',\n    mapsApiKey,\n  }: GoogleChartLoaderOptions\n): Promise<GoogleViz | undefined> {\n  const loader = await getChartsLoader();\n\n  const settingsKey = `${version}_${packages.join('_')}_${language}`;\n\n  if (loadedPackages.has(settingsKey)) return loadedPackages.get(settingsKey);\n\n  const loaderPromise: Promise<GoogleViz | undefined> = new Promise(resolve => {\n    loader.load(version, {\n      packages,\n      language,\n      mapsApiKey,\n    });\n\n    loader.setOnLoadCallback(() => resolve(window.google));\n  });\n\n  loadedPackages.set(settingsKey, loaderPromise);\n\n  return loaderPromise;\n}\n","import {\n  GoogleChartWrapper,\n  GoogleChartWrapperChartType,\n  GoogleDataTable,\n  GoogleDataView,\n  GoogleViz,\n  GoogleVizEventName,\n  GoogleVizEvents,\n} from './types';\n\nexport interface ICreateChartFunction {\n  (\n    el: HTMLElement,\n    google: GoogleViz,\n    type: GoogleChartWrapperChartType\n  ): GoogleChartWrapper;\n}\n\nexport function getValidChartData(\n  chartsLib: null | GoogleViz,\n  data: unknown[][] | GoogleDataTable | Record<string, any> | null,\n  isFirstRowLabels?: boolean\n): GoogleDataTable | GoogleDataView | null {\n  if (chartsLib !== null && data instanceof chartsLib.visualization.DataTable) {\n    return data;\n  }\n\n  if (chartsLib !== null && data instanceof chartsLib.visualization.DataView) {\n    return data;\n  }\n\n  if (chartsLib !== null && Array.isArray(data)) {\n    return chartsLib.visualization.arrayToDataTable(data, isFirstRowLabels);\n  }\n\n  if (chartsLib !== null && data !== null && typeof data === 'object') {\n    return new chartsLib.visualization.DataTable(data);\n  }\n\n  return null;\n}\n\nexport function createChartObject(\n  chartsLib: GoogleViz | null,\n  chartObject: GoogleChartWrapper | null,\n  chartEl: HTMLElement | null,\n  chartType: GoogleChartWrapperChartType,\n  chartEvents: GoogleVizEvents | null,\n  createChartFunction?: ICreateChartFunction\n): GoogleChartWrapper | null {\n  const createChart: ICreateChartFunction = (\n    el: HTMLElement,\n    google: GoogleViz,\n    type: GoogleChartWrapperChartType\n  ): GoogleChartWrapper => {\n    if (type === undefined) {\n      throw new Error('please, provide chart type property');\n    }\n\n    return new google.visualization[type](el);\n  };\n\n  if (chartsLib === null) {\n    throw new Error('please, provide charts lib property');\n  }\n\n  if (chartEl === null) {\n    throw new Error('please, provide chart element property');\n  }\n\n  const fn = createChartFunction || createChart;\n\n  chartObject = fn(chartEl, chartsLib, chartType);\n\n  attachListeners(chartsLib, chartObject, chartEvents);\n\n  return chartObject;\n}\n\nfunction attachListeners(\n  chartsLib: null | GoogleViz,\n  chartObject: GoogleChartWrapper | null,\n  chartEvents: GoogleVizEvents | null\n): void {\n  if (chartEvents === null) {\n    return;\n  }\n\n  for (const [event, listener] of Object.entries(chartEvents)) {\n    if (chartsLib !== null && chartObject !== null) {\n      chartsLib.visualization.events.addListener(\n        chartObject,\n        event as GoogleVizEventName,\n        listener as (chartWrapper: GoogleChartWrapper) => any\n      );\n    }\n  }\n}\n","export interface DebouncedFunction<\n  Args extends any[],\n  F extends (...args: Args) => any\n> {\n  (this: ThisParameterType<F>, ...args: Args & Parameters<F>): void;\n}\n\nexport function debounce<Args extends any[], F extends (...args: Args) => any>(\n  func: F,\n  waitMilliseconds = 50\n): DebouncedFunction<Args, F> {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  function nextInvokeTimeout() {\n    return waitMilliseconds;\n  }\n\n  const debouncedFunction = function (\n    this: ThisParameterType<F>,\n    ...args: Parameters<F>\n  ) {\n    const context = this;\n\n    const invokeFunction = function () {\n      timeoutId = undefined;\n\n      func.apply(context, args);\n    };\n\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(invokeFunction, nextInvokeTimeout());\n  };\n\n  return debouncedFunction;\n}\n","import {\n  defineComponent,\n  ref,\n  h,\n  onMounted,\n  onBeforeUnmount,\n  watch,\n  PropType,\n} from 'vue';\n\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleChartWrapperChartType,\n  GoogleChartOptions,\n  GoogleChartVersion,\n  GoogleChartLoaderOptions,\n  GoogleVizEvents,\n  GoogleDataTable,\n} from '../types';\n\nimport {\n  createChartObject,\n  getValidChartData,\n  ICreateChartFunction,\n} from '../utils';\n\nimport { loadGoogleCharts } from '../lib/google-charts-loader';\nimport { debounce } from '../lib/debounce';\n\nlet chartsLib: null | GoogleViz = null;\n\nexport const GChart = defineComponent({\n  name: 'GChart',\n  props: {\n    type: {\n      type: String as PropType<GoogleChartWrapperChartType>,\n      required: true,\n    },\n    data: {\n      type: [Array, Object, null] as PropType<\n        unknown[][] | GoogleDataTable | Record<string, any> | null\n      >,\n      default: () => [],\n    },\n    isFirstRowLabels: {\n      type: Boolean,\n      default: false,\n    },\n    options: {\n      type: Object as PropType<GoogleChartOptions>,\n      default: () => ({}),\n    },\n    version: {\n      type: String as PropType<GoogleChartVersion>,\n      default: 'current',\n    },\n    settings: {\n      type: Object as PropType<GoogleChartLoaderOptions>,\n      default: () => ({\n        packages: ['corechart', 'table'],\n      }),\n    },\n    events: {\n      type: Object as PropType<GoogleVizEvents | null>,\n      default: null,\n    },\n    createChart: {\n      type: Function as PropType<ICreateChartFunction>,\n      default: undefined,\n    },\n    resizeDebounce: {\n      type: Number,\n      default: 200,\n    },\n  },\n  setup(props, { emit }) {\n    const chartObject = ref<GoogleChartWrapper | null>(null);\n    const chartEl = ref<HTMLElement | null>(null);\n\n    function drawChart(): void {\n      if (chartsLib === null || chartObject.value === null) {\n        return;\n      }\n\n      const data = getValidChartData(\n        chartsLib,\n        props.data,\n        props.isFirstRowLabels\n      );\n      if (data !== null) {\n        chartObject.value?.draw(data, props.options);\n      }\n    }\n\n    watch(\n      () => props.data,\n      () => drawChart(),\n      { deep: true }\n    );\n\n    watch(\n      () => props.options,\n      () => drawChart(),\n      { deep: true }\n    );\n\n    watch(\n      () => props.type,\n      () => {\n        chartObject.value = createChartObject(\n          chartsLib,\n          chartObject.value,\n          chartEl.value,\n          props.type,\n          props.events,\n          props.createChart\n        );\n\n        drawChart();\n      }\n    );\n\n    onMounted(() => {\n      loadGoogleCharts(props.version, props.settings).then(api => {\n        if (api !== undefined) {\n          chartsLib = api;\n\n          chartObject.value = createChartObject(\n            chartsLib,\n            chartObject.value,\n            chartEl.value,\n            props.type,\n            props.events,\n            props.createChart\n          );\n\n          emit('ready', chartObject.value, api);\n\n          drawChart();\n        }\n      });\n\n      if (props.resizeDebounce > 0) {\n        window.addEventListener(\n          'resize',\n          debounce(drawChart, props.resizeDebounce) as EventListener\n        );\n      }\n    });\n\n    onBeforeUnmount(() => {\n      if (\n        chartObject.value !== null &&\n        typeof chartObject.value.clearChart === 'function'\n      ) {\n        chartObject.value.clearChart();\n      }\n\n      if (props.resizeDebounce > 0) {\n        window.removeEventListener(\n          'resize',\n          debounce(drawChart, props.resizeDebounce) as EventListener\n        );\n      }\n    });\n\n    return () => h('div', { ref: chartEl }, []);\n  },\n});\n","import { createApp } from 'vue';\n\nimport { loadGoogleCharts } from './lib/google-charts-loader';\nimport { GChart } from './components/GChart';\n\nconst app = createApp({});\n\n// Install the components\nexport function install() {\n  app.component('GChart', GChart);\n}\n\n// Expose the components\nexport { loadGoogleCharts, GChart };\n\n/* -- Plugin definition & Auto-install -- */\n/* You shouldn't have to modify the code below */\n\n// Plugin\nconst plugin = {\n  version: process.env.VERSION,\n  install,\n};\n\nexport default plugin;\n\n// Auto-install\nlet GlobalVue = null;\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue;\n}\n\nif (GlobalVue !== null && GlobalVue !== undefined) {\n  app.use(plugin);\n}\n","import script from \"./CardComponent.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CardComponent.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./CardComponent.vue?vue&type=style&index=0&id=30586156&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-30586156\"]])\n\nexport default __exports__","<template>\r\n    <div>\r\n        <div class=\"container\">\r\n            <div class=\"card\">\r\n                <div class=\"card-body\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Assembled Today\" :count=\"assembling.today\"  icon=\"bi-hash\" />\r\n                        </div>\r\n\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Assembled this Month\" :count=\"assembling.current_month\"  icon=\"bi-hash\" />\r\n                        </div>\r\n\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Assembled this Year\" :count=\"assembling.current_year\"  icon=\"bi-hash\" />\r\n                        </div>\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Total Assembled\" :count=\"assembling.total\"  icon=\"bi-hash\" />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Number of Vehicles\" :count=\"logistics.vehicle\"  icon=\"bi-hash\" />\r\n                        </div>\r\n\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Spent on Fuel, this month\" :count=\"logistics.fuel_month\"  icon=\"bi-cash\" />\r\n                        </div>\r\n\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Spent on Fuel, this year\" :count=\"logistics.fuel_year\"  icon=\"bi-cash\" />\r\n                        </div>\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Spent on Oil, this month\" :count=\"logistics.oil_month\"  icon=\"bi-cash\" />\r\n                        </div>\r\n\r\n                    </div>\r\n \r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Full time Staff\" :count=\"staff.total_staff\"  icon=\"bi-hash\" />\r\n                        </div>\r\n\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Casual Staff\" :count=\"staff.casual_staff\"  icon=\"bi-hash\" />\r\n                        </div>\r\n\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Departments\" :count=\"staff.dept\"  icon=\"bi-hash\" />\r\n                        </div>\r\n                        <div class=\"col-md-3 mb-1\">\r\n                            <Card title=\"Sub Department\" :count=\"staff.sub\"  icon=\"bi-hash\" />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-7\">\r\n                            <GChart type=\"ColumnChart\" v-if=\"dailyColumn.data.length\" :data=\"dailyColumn.data\"\r\n                                :options=\"dailyColumn.options\" />\r\n                        </div>\r\n\r\n                        <div class=\"col-md-5\">\r\n                            <GChart type=\"ColumnChart\" v-if=\"monthlyColumn.data.length\" :data=\"monthlyColumn.data\"\r\n                                :options=\"monthlyColumn.options\" />\r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n              \r\n           \r\n            store\r\n            <div class=\"row\">\r\n                {{ inventory }}\r\n                <div class=\"col-md-6\">\r\n                    Suppliers\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                    Discos/Customers\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                    items count\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                    items given out\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                    damage item\r\n                </div>\r\n            </div>\r\n\r\n            <hr>\r\n            logistics\r\n            <div class=\"row\">\r\n                {{ logistics }}\r\n                <div class=\"col-md-4\">\r\n                    staff\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                    Vehicle\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                    Espense\r\n                </div>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\n    \r\n\r\nimport store from \"@/store\";\r\nimport { onMounted, ref } from \"vue\";\r\nimport Card from '@/components/CardComponent.vue'\r\nimport { GChart } from 'vue-google-charts'\r\n\r\nconst monthNames = ['','Jan','Feb', 'Mar', 'Apr', 'May', 'Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n\r\nconst monthlyColumn = ref({\r\n    options:  {\r\n            title: 'Assembled Monthly',\r\n            // subtitle: 'Sales, Expenses, and Profit: 2014-2017',        \r\n},\r\n data:[]})\r\nconst dailyColumn = ref({\r\n    options:  {\r\n            title: 'Assembled Daily',\r\n            // subtitle: 'Sales, Expenses, and Profit: 2014-2017',        \r\n},\r\n data:[]})\r\n\r\n\r\nconst staff = ref({})\r\nconst staffCount = () => {\r\n    store.dispatch('getMethod', { url: '/load-staff-count' }).then((data) => {\r\n        if (data?.status == 200) {\r\n            staff.value = data.data;\r\n        }\r\n    })\r\n}\r\nconst assembling = ref({})\r\nconst staffAssembled = () => {\r\n    store.dispatch('getMethod', { url: '/load-assembly-count' }).then((data) => {\r\n        if (data?.status == 200) {\r\n            assembling.value = data.data;\r\n            let daily = data.data.daily\r\n            let monthly = data.data.monthly\r\n            \r\n        monthlyColumn.value.data.push(['Month','total'])\r\n        monthly.forEach((element) => {\r\n            monthlyColumn.value.data.push([monthNames[element?.month] , element.total])\r\n        })\r\n        dailyColumn.value.data.push(['Date','total'])\r\n        daily.forEach((element) => {\r\n            dailyColumn.value.data.push([element?.date , element.total])\r\n        })\r\n        }\r\n    })\r\n}\r\n\r\nconst logistics = ref({})\r\nconst logisticsCount = () => {\r\n    store.dispatch('getMethod', { url: '/load-logistics-count' }).then((data) => {\r\n        if (data?.status == 200) {\r\n            logistics.value = data.data;\r\n        }\r\n    })\r\n}\r\nconst inventory = ref({})\r\nconst inventoryCount = () => {\r\n    store.dispatch('getMethod', { url: '/load-store-count' }).then((data) => {\r\n        if (data?.status == 200) {\r\n            inventory.value = data.data;\r\n        }\r\n    })\r\n}\r\n\r\n\r\n\r\nonMounted(() => {\r\n  staffCount()  \r\n    staffAssembled()  \r\n    logisticsCount()  \r\n    inventoryCount()  \r\n})\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import script from \"./MdDashboard.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MdDashboard.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["chartsScriptUrl","chartsLoaderPromise","loadedPackages","Map","getChartsLoader","undefined","window","google","Promise","resolve","charts","foundScript","document","querySelector","concat","script","createElement","src","type","head","append","onload","loadGoogleCharts","version","arguments","length","packages","language","mapsApiKey","loader","settingsKey","join","has","get","loaderPromise","load","setOnLoadCallback","set","getValidChartData","chartsLib","data","isFirstRowLabels","visualization","DataTable","DataView","Array","isArray","arrayToDataTable","createChartObject","chartObject","chartEl","chartType","chartEvents","createChartFunction","createChart","el","Error","fn","attachListeners","event","listener","Object","entries","events","addListener","debounce","func","timeoutId","waitMilliseconds","nextInvokeTimeout","debouncedFunction","_len","args","_key","context","this","invokeFunction","apply","clearTimeout","setTimeout","GChart","defineComponent","name","props","String","required","default","Boolean","options","settings","Function","resizeDebounce","Number","setup","param","emit","ref","drawChart","value","ref1","draw","watch","deep","onMounted","then","api","addEventListener","onBeforeUnmount","clearChart","removeEventListener","h","app","createApp","install","component","plugin","GlobalVue","Vue","use","__exports__","monthNames","monthlyColumn","title","dailyColumn","staff","staffCount","store","dispatch","url","status","assembling","staffAssembled","daily","monthly","push","forEach","element","month","total","date","logistics","logisticsCount","inventory","inventoryCount"],"sourceRoot":""}